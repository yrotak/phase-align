name: Build and Release Phase Align

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub Release'
        type: boolean
        default: true
        required: true
permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            package_ext: zip
            job_name: build-windows-cl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            package_ext: tar.gz
            job_name: build-ubuntu-clang
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    name: ${{ matrix.job_name }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install SDL2 on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y libsdl2-dev

      - name: Install SDL2 on Windows
        if: startsWith(matrix.os, 'windows')
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://github.com/libsdl-org/SDL/releases/download/release-2.30.1/SDL2-devel-2.30.1-VC.zip -OutFile SDL2.zip
          Expand-Archive SDL2.zip -DestinationPath SDL2
          echo "SDL2_DIR=${{ github.workspace }}/SDL2/SDL2-2.30.1" >> $env:GITHUB_ENV

      - name: Set SDL2 include/lib on Windows
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          echo "SDL2_INCLUDE_DIR=${SDL2_DIR}/include" >> $GITHUB_ENV
          echo "SDL2_LIBRARY=${SDL2_DIR}/lib/x64/SDL2.lib" >> $GITHUB_ENV

      - name: Set reusable strings
        id: strings
        shell: bash
        run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DSDL2_INCLUDE_DIR=${{ env.SDL2_INCLUDE_DIR }}
          -DSDL2_LIBRARY=${{ env.SDL2_LIBRARY }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Package
        shell: bash
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          mkdir -p package
          find . -maxdepth 1 -type f -name "phase-align*" -exec cp {} package/ \;
          cd package
          if [[ "${{ matrix.package_ext }}" == "zip" ]]; then
            7z a ../phase-align-${{ matrix.os }}-${{ matrix.c_compiler }}.zip *
          else
            tar -czvf ../phase-align-${{ matrix.os }}-${{ matrix.c_compiler }}.tar.gz *
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: phase-align-${{ matrix.os }}-${{ matrix.c_compiler }}
          path: ${{ steps.strings.outputs.build-output-dir }}/phase-align-*.${{ matrix.package_ext }}

    release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.create_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          draft: false
          prerelease: false
          release_name: ${{ github.event.inputs.release_tag }}
          tag_name: ${{ github.event.inputs.release_tag }}
          body: "Release ${{ github.event.inputs.release_tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Uploading assets..."
          for file in $(find artifacts -type f); do
            echo "Uploading $file"
            curl \
              -sSf \
              -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: $(file --mime-type -b "$file")" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename "$file")"
          done

    